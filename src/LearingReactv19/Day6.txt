✅ You can handle events by passing a function as a prop to an element like `<button>`.  
✅ Event handlers must be passed, not called! `onClick={handleClick}`, not `onClick={handleClick()}`.  
✅ You can define an event handler function separately or inline.  
✅ Event handlers are defined inside a component, so they can access props.  
✅ You can declare an event handler in a parent and pass it as a prop to a child.  
✅ You can define your own event handler props with application-specific names.  
✅ Events propagate upwards. Call `e.stopPropagation()` on the first argument to prevent that.  
✅ Events may have unwanted default browser behavior. Call `e.preventDefault()` to prevent that.  
✅ Explicitly calling an event handler prop from a child handler is a good alternative to propagation.

✅ Use a state variable when a component needs to “remember” some information between renders.  
✅ State variables are declared by calling the `useState` Hook.  
✅ Hooks are special functions that start with `use`. They let you “hook into” React features like state.  
✅ Hooks might remind you of imports: they need to be called unconditionally. Calling Hooks, including `useState`, is only valid at the top level of a component or another Hook.  
✅ The `useState` Hook returns a pair of values: the current state and the function to update it.  
✅ You can have more than one state variable. Internally, React matches them up by their order.  
✅ State is private to the component. If you render it in two places, each copy gets its own state.