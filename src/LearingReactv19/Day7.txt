✅ Any screen update in a React app happens in three steps:
Trigger
Render
Commit
✅ You can use Strict Mode to find mistakes in your components.
✅ React does not touch the DOM if the rendering result is the same as last time.

✅ Setting state requests a new render.
✅ React stores state outside of your component, as if on a shelf.
✅ When you call useState, React gives you a snapshot of the state for that render.
✅ Variables and event handlers don’t “survive” re-renders. Every render has its own event handlers.
✅ Every render (and functions inside it) will always “see” the snapshot of the state that React gave to that render.
✅ You can mentally substitute state in event handlers, similarly to how you think about the rendered JSX.
✅ Event handlers created in the past have the state values from the render in which they were created.

✅ Setting state does not change the variable in the existing render, but it requests a new render.
✅ React processes state updates after event handlers have finished running. This is called batching.
✅ To update some state multiple times in one event, you can use setNumber(n => n + 1) updater function.